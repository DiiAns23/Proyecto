package Analizadores; 
import java_cup.runtime.*;
import java.util.ArrayList;
import Clases.*;

parser code 
{:
    public static Expresion_Regular er = new Expresion_Regular();
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". Este componente no deberia de venir: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("No se puede recuparar el error Sintactico en la Linea: " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no se reconoce."); 
    }  
:} 

terminal String CONJUNTO;
terminal String DIP,FLECHA,LLAVEI,LLAVED,DPUNTOS,PUNTO,INTERR,PTCOMA,BARRA,MAS,POR,PORC;
terminal String ENTERO,RAN,ALFAMAY,ALFAMIN,COMILLA,COMA,DEC;
non terminal ini,expresion,expresion2,conjuntos,listainstrucciones;
non terminal instrucciones,n_exp,alfabeto,conj,conj2;
non terminal instruccion,combinacion,comilla,xdxdxd,lect,lect2;


start with ini; 

ini::=instrucciones;

instrucciones ::= 
   LLAVEI  listainstrucciones LLAVED
; 

listainstrucciones::=
    listainstrucciones instruccion
 |  instruccion
;

instruccion ::= 
   conj 
 | n_exp 
 | PORC PORC {:er.Separacion();:}
 | lect
 | error
;

conj::=
    CONJUNTO DPUNTOS RAN:a FLECHA  conjuntos PTCOMA 
;

conjuntos ::=   
    ALFAMIN:b DIP ALFAMIN:c  
 |  ALFAMAY:b DIP ALFAMAY:c 
 |  ENTERO:b  DIP ENTERO:c   
 |  xdxdxd
;

xdxdxd::=
    ALFAMIN:b  conj2
 |  ALFAMAY:b  conj2
 |  ENTERO:b   conj2
;

conj2::=
    COMA xdxdxd
 |  ALFAMIN:b 
 |  ALFAMAY:b 
 |  ENTERO:b  
 |  
;


n_exp ::=
    RAN:b   FLECHA  expresion:a PTCOMA  {:er.ER((String)a, b);:}
;

expresion ::=
    INTERR:a alfabeto:b         {:RESULT=(String)a+(String)b;:}
 |  POR:a expresion2:b          {:RESULT=(String)a+(String)b;:}
 |  POR:a alfabeto:b            {:RESULT=(String)a+(String)b;:}
 |  PUNTO:a combinacion:b       {:RESULT=(String)a+(String)b;:}
 |  BARRA:a combinacion:b       {:RESULT=(String)a+(String)b;:}
 |  MAS:a alfabeto:b            {:RESULT=(String)a+(String)b;:}
 |  MAS:a expresion2:b          {:RESULT=(String)a+(String)b;:}
 |  INTERR:a expresion2:b       {:RESULT=(String)a+(String)b;:}
;

expresion2::=
    PUNTO:a combinacion:b   {:RESULT=(String)a+(String)b;:}
 |  BARRA:a combinacion:b   {:RESULT=(String)a+(String)b;:}
;   

combinacion::=
    alfabeto:a expresion:b  {:RESULT=(String)a+(String)b;:}
 |  alfabeto:a alfabeto:b   {:RESULT=(String)a+(String)b;:}
 |  alfabeto:a comilla:b    {:RESULT=(String)a+(String)b;:}
 |  expresion:a alfabeto:b  {:RESULT=(String)a+(String)b;:}
 |  expresion:a comilla:b   {:RESULT=(String)a+(String)b;:}
 |  expresion:a expresion:b {:RESULT=(String)a+(String)b;:}
 |  comilla:a expresion:b   {:RESULT=(String)a+(String)b;:}
 |  comilla:a alfabeto:b    {:RESULT=(String)a+(String)b;:}
 |  comilla:a comilla:b     {:RESULT=(String)a+(String)b;:}
;

alfabeto::=
    LLAVEI RAN:a LLAVED     {:RESULT="{"+(String)a+"}";:};

comilla::=
    COMILLA:a RAN:b COMILLA:c             {:RESULT=(String)a+(String)b+(String)c;:}
 |  COMILLA:a ENTERO:b COMILLA:c          {:RESULT=(String)a+(String)b+(String)c;:}
 |  COMILLA:a PUNTO:b  COMILLA:c          {:RESULT=(String)a+(String)b+(String)c;:}
;

lect::=
    RAN:a   DPUNTOS COMILLA lect2:b COMILLA PTCOMA 
;

lect2::=
    RAN:b   {:RESULT=(String)b;:}
 |  DEC:b   {:RESULT=(String)b;:}
;
